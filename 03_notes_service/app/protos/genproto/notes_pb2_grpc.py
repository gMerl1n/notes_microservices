# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import notes_pb2 as notes__pb2


class NoteStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateNote = channel.unary_unary(
                '/notes.Note/CreateNote',
                request_serializer=notes__pb2.CreateNoteRequest.SerializeToString,
                response_deserializer=notes__pb2.CreateNoteResponse.FromString,
                )
        self.GetNote = channel.unary_unary(
                '/notes.Note/GetNote',
                request_serializer=notes__pb2.GetNoteRequest.SerializeToString,
                response_deserializer=notes__pb2.GetNoteResponse.FromString,
                )
        self.GetNotes = channel.unary_unary(
                '/notes.Note/GetNotes',
                request_serializer=notes__pb2.GetListNotesRequest.SerializeToString,
                response_deserializer=notes__pb2.GetListNotesResponse.FromString,
                )


class NoteServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateNote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNotes(self, request, context):
        """rpc DeleteNote (DeleteNoteRequest) returns (DeleteNoteReponse);
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NoteServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateNote': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateNote,
                    request_deserializer=notes__pb2.CreateNoteRequest.FromString,
                    response_serializer=notes__pb2.CreateNoteResponse.SerializeToString,
            ),
            'GetNote': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNote,
                    request_deserializer=notes__pb2.GetNoteRequest.FromString,
                    response_serializer=notes__pb2.GetNoteResponse.SerializeToString,
            ),
            'GetNotes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNotes,
                    request_deserializer=notes__pb2.GetListNotesRequest.FromString,
                    response_serializer=notes__pb2.GetListNotesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'notes.Note', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Note(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateNote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/notes.Note/CreateNote',
            notes__pb2.CreateNoteRequest.SerializeToString,
            notes__pb2.CreateNoteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/notes.Note/GetNote',
            notes__pb2.GetNoteRequest.SerializeToString,
            notes__pb2.GetNoteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNotes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/notes.Note/GetNotes',
            notes__pb2.GetListNotesRequest.SerializeToString,
            notes__pb2.GetListNotesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
